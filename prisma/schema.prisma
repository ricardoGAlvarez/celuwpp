// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User{
  id Int @id @default(autoincrement())
  username String @unique
  email String @unique
  password String
    // memberships Membership[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model Organization {
//   id          Int          @id @default(autoincrement())
//   name        String?      @unique
//   createdAt   DateTime     @default(now())
//   updatedAt   DateTime     @updatedAt
//   memberships Membership[]
//   domain      Domain[]
//   products Product[]
//   categories Category[]
// }

// model Domain {
//   domain String @id

//   isValid Boolean // This boolean should be true if a cronjob monitors that the domain points to our app address

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   Organization   Organization @relation(fields: [organizationId], references: [id])
//   organizationId Int
// }

// model Membership {
//   id   Int            @id @default(autoincrement())
//   role String

//   organization   Organization @relation(fields: [organizationId], references: [id])
//   organizationId Int
//   user           User         @relation(fields: [userId], references: [id])
//   userId         Int


//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   @@unique([userId, organizationId])
// }

// enum MembershipRole {
//   OWNER
//   MEMBER
// }


model Product {
  id          Int       @id @default(autoincrement())
  productName String    @unique
  description String
  price       Int
  stock       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  categories  Category[] // Define la relación de uno a muchos
  // organization   Organization @relation(fields: [organizationId], references: [id])
  // organizationId Int
  // @@unique([productName, organizationId])
}

model Category {
  id          Int      @id @default(autoincrement())
  categoryName String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  products    Product[] // Define la relación de uno a muchos
  // organization   Organization @relation(fields: [organizationId], references: [id])
  // organizationId Int
  //  @@unique([categoryName, organizationId])
}
